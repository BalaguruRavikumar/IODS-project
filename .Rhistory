X<-5
X
library(course15)
shiny::runApp('workspace/R_scripts/Tools/DT_maps')
shiny::runGitHub('catch22', 'trevorstephens')
R_home()
R.home()
which R
get_wd()
get.wd()
getwd()
data <- read.delim("/Desktop/bite_assay.txt")
data <- read.delim("/Users/ravikuma/Desktop/bite_assay.txt")
data
in_d <- data[,-1]
in_d
data <- read.delim("/Users/ravikuma/Desktop/bite_assay.txt")
in_d <- data[,-1]
ind_d
in_d <- data[,-1]
in_d
data <- read.delim("/Users/ravikuma/Desktop/bite_assay.txt")
data
in_d <- data[,-1]
in_d
plot(in_d[,1])
t.test(in_d)
?t.test
t.test(in_d[,1],in_d[,2])
t.test(in_d[,1],in_d[,2],alternative = "less")
t.test(in_d[,1],in_d[,3],alternative = "less")
t.test(in_d[,1],in_d[,5],alternative = "less")
dim(in_d)
for(i in 2:dim(in_d)[1])
{
t.test(in_d[,1],in_d[,i])
}
print(t.test(in_d[,1],in_d[,i]))
for(i in 2:dim(in_d)[1])
{
print(t.test(in_d[,1],in_d[,i]))
}
data <- read.delim("/Users/ravikuma/Desktop/bite_assay.txt")
in_d <- data[,-1]
ttest <- c()
for(i in 2:dim(in_d)[1])
{
ttest[i]<- t.test(in_d[,1],in_d[,i])$p.value
}
ttest
plot(ttest[-1])
in_d[1,]
in_d[2,]
tdil <- c()
for(i in 2:dim(in_d)[1])
{
tdil[i]<- t.test(in_d[1,],in_d[i,])$p.value
}
plot(tdil[-1])
in_d
plot(ttag[-1])
ttag <- c()
for(i in 2:dim(in_d)[1])
{
ttag[i]<- t.test(in_d[,1],in_d[,i])$p.value
}
plot(ttag[-1])
tdil <- c()
for(i in 2:dim(in_d)[1])
{
tdil[i]<- t.test(in_d[1,],in_d[i,])$p.value
}
plot(tdil[-1])
getwd()
setwd("/Users/ravikuma/Guru/my_docs/Courses/MOOC/IODS/IODS-project")
alc <- read.table('data/alc_data.txt', header=TRUE)
glimpse(alc)
library(dplyr)
library(tidyr)
library(ggplot2)
alc <- read.table('data/alc_data.txt', header=TRUE)
glimpse(alc)
colnames(alc)
glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
head(alc)
my_var <- c("Pstatus" , "romantic", "freetime","goout")
my_model <- glm(high_use ~ Pstatus + romantic + freetime + goout, data = alc, family = "binomial")
mydata <- select(alc, keep_column(my_var))
mydata <- select(alc, keep_columns(my_var))
mydata <- select(alc, one_of(my_var))
mydata
?gather
select(alc, one_of(c(my_var,"high_use"))
)
alc_data <- select(alc, one_of(c(my_var,"high_use")))
gather(alc_data) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
ggplot(alc_data, aes(x = high_use))
alc_data
ggplot(alc_data, aes(x = high_use)) +geom_bar()+facet_wrap()
ggplot(alc_data, aes(x = high_use, y = Pstatus)) +geom_bar()
ggplot(alc_data, aes(x = high_use, y = Pstatus)) +geom_box()
ggplot(alc_data, aes(x = high_use, y = Pstatus)) + geom_boxplot() + ylab("grade")
ggplot(alc_data, aes(x = high_use, y = Pstatus)) + geom_bar() + ylab("grade")
ggplot(alc_data, aes(x = high_use, y = freetime)) + geom_bar() + ylab("grade")
ggplot(alc_data, aes(x = high_use, y = freetime)) + geom_bar()
ggplot(alc_data, aes(x = high_use)) + geom_bar(aes(y = "Pstauts"))
alc_data
ggplot(alc_data, aes(x = high_use, y = goout))
ggplot(alc_data, aes(x = high_use, y = goout)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime)) +geom_boxplot()
alc_data <- select(alc, one_of(c(my_var,"high_use")))
ggplot(alc_data, aes(x = high_use, y = goout)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = goout)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = Pstatus)) + geom_bar()
ggplot(alc_data, aes(x = high_use, y = Pstatus)) + geom_bar()
ggplot(alc_data, aes(Pstatus)) + geom_bar()
ggplot(alc_data, aes(x = high_use, col = Pstauts)) + geom_boxplot()
ggplot(alc_data, aes(Pstatus)) + geom_bar()
ggplot(alc_data, aes(x = high_use, col = Pstatus)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, col = Pstatus)) + geom_bar()
ggplot(alc_data, aes(x = high_use, y = failures)) + geom_boxplot()
my_var <- c("failures" , "romantic", "freetime","goout")
my_model <- glm(high_use ~ failures + romantic + freetime + goout, data = alc, family = "binomial")
alc_data <- select(alc, one_of(c(my_var,"high_use")))
ggplot(alc_data, aes(x = high_use, y = failures)) + geom_boxplot()
my_var <- c("famsize" , "romantic", "freetime","goout")
my_model <- glm(high_use ~ famsize + romantic + freetime + goout, data = alc, family = "binomial")
alc_data <- select(alc, one_of(c(my_var,"high_use")))
alc_data
ggplot(alc_data, aes(x = high_use, y = famsize)) + geom_boxplot()
summary(alc_data)
ggplot(alc_data, aes(x = high_use, y = goout, col = famsize)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = famsize, col = goout)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime, col = romantic)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime, col = romnatic)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime, col = romantic)) + geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = goout, col = famsize)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = goout, col = famsize)) +geom_boxplot()
ggplot(alc_data, aes(x = high_use, y = freetime, col = romantic)) + geom_boxplot()
alc_data <- select(alc, one_of(c(my_var,"high_use")))
ggplot(alc_data, aes(x = high_use, y = goout, col = famsize)) +geom_boxplot() + ggtitle("High alcohol consumptions vs Goinging-out time and family-size")
ggplot(alc_data, aes(x = high_use, y = freetime, col = romantic)) + geom_boxplot() + ggtitle("High alcohol consumptions vs Free time and romantic")
ggplot(alc_data, aes(x = high_use, y = freetime)) + geom_boxplot() + ggtitle("High alcohol consumptions vs Free time and romantic")
log_model <- glm(high_use ~ famsize + romantic + freetime + goout, data = alc, family = "binomial")
summary(log_model)
log_model <- glm(high_use ~ famsize + romantic + freetime + goout, data = alc_data, family = "binomial")
summary(log_model)
OR <- coef(log_model) %>% exp
OR
CI <- confint(m) %>% exp
CI <- confint(log_model) %>% exp
CI
cbind(OR,CI)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mydata$rank <- factor(mydata$rank)
mydata
str(alc_data)
summary(log_model)
log_model <- glm(high_use ~ famsize + romantic + freetime + goout, data = alc_data, family = "binomial")
summary(log_model)
OR <- coef(log_model) %>% exp
CI <- confint(log_model) %>% exp
cbind(OR,CI)
log_model2 <- glm(high_use ~ goout, data = alc_data, family = "binomial")
probabilities <- predict(log_model2, type = "response")
probabilities
alc_data <- mutate(alc_data, probability = probabilities)
alc_data <- mutate(alc_data, prediction = probability > 0.5)
alc_data
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc_data$high_use, prediction = alc_data$prediction)
loss_func(class = alc_data$high_use, prob = alc_data$probability)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc_data$high_use, prob = alc_data$probability)
probabilities
loss_func(class = alc_data$high_use, prob = alc_data$probability)
log_model3 <- glm(high_use ~ freetime, data = alc_data, family = "binomial")
log_model3 <- glm(high_use ~ freetime, data = alc_data, family = "binomial")
probabilities <- predict(log_model3, type = "response")
alc_data <- mutate(alc_data, probability = probabilities)
alc_data <- mutate(alc_data, prediction = probability > 0.5)
table(high_use = alc_data$high_use, prediction = alc_data$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc_data$high_use, prob = alc_data$probability)
library(boot)
cv <- cv.glm(data = alc_data, cost = loss_func, glmfit = log_model2, K = 10)
cv$delta[1]
log_model2 <- glm(high_use ~ goout, data = alc_data, family = "binomial")
probabilities <- predict(log_model2, type = "response")
alc_data <- mutate(alc_data, probability = probabilities)
alc_data <- mutate(alc_data, prediction = probability > 0.5)
table(high_use = alc_data$high_use, prediction = alc_data$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc_data$high_use, prob = alc_data$probability)
glm(high_use ~ ., data = alc_data, family = "binomial")
alc
alc_data
predictors <- seq(1:10)
predictors
predictors <- reverse(seq(1:20))
predictors <- rev(seq(1:20))
predictors
nsample(predictors[1], colnames(alc))
sample
sample(predictors[1], colnames(alc))
predictors[1]
sample( colnames(alc),predictors[1])
colnames(alc)
colnames(alc)[-length(colnames(alc))]
sample( colnames(alc)[-c(34,35)],predictors[1])
cnames <- sample( colnames(alc)[-c(34,35)],predictors[1])
set.seed(123)
cnames <- sample( colnames(alc)[-c(34,35)],predictors[1])
cnames
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[1]),"high_use")
cnames
tempdata <- select(alc, one_of(cnames))
tempdata
get_log_model <- func(mydata){
get_log_model <- func(mydata)
get_log_model <- function(mydata){
mymod <- glm(high_use ~ ., data = mydata, family = "binomial")
cv <- cv.glm(data = mydata, cost = loss_func, glmfit = mymod, K = 10)
return(cv$delta[1])
}
get_log_model(tempdata)
predictors <- rev(seq(1:10))
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[1]),"high_use")
tempdata <- select(alc, one_of(cnames))
get_log_model(tempdata)
get_log_model <- function(mydata){
mymod <- glm(high_use ~ ., data = mydata, family = "binomial")
cv <- cv.glm(data = mydata, cost = loss_func, glmfit = mymod, K = 10)
return(cv$delta[1])
}
cv_values <- c()
predictors <- rev(seq(1:10))
for( i in 1:length(predictors)){
set.seed(123)
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[i]),"high_use")
tempdata <- select(alc, one_of(cnames))
cv_values[i] <- get_log_model(tempdata)
}
cv_values
i<-1
colnames(alc)[-c(34,35)],predictors[i]),"high_use")
set.seed(123)
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[i]),"high_use")
tempdata <- select(alc, one_of(cnames))
cv_values[i] <- get_log_model(tempdata)
set.seed(123)
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[i]),"high_use")
tempdata <- select(alc, one_of(cnames))
cv_values[i] <- get_log_model(tempdata)
cnames
i<-10
i<-1
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[i]),"high_use")
cnames
cv_values[i] <- get_log_model(tempdata)
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[i]),"high_use")
tempdata <- select(alc, one_of(cnames))
cv_values[i] <- get_log_model(tempdata)
cnames <- c(sample( colnames(alc)[-c(34,35)],predictors[i]),"high_use")
tempdata <- select(alc, one_of(cnames))
cv_values[i] <- get_log_model(tempdata)
cv_values
cnames
predictors <- cnames[-length(cnames)]
predictors
tempdata <- select(alc, one_of(c(cnames,"high_use"))
cv_values[i] <- get_log_model(tempdata)
tempdata <- select(alc, one_of(c(cnames,"high_use")))
cv_values[i] <- get_log_model(tempdata)
cv_values
length(cnames):1
predictors
predictors[1:length(predictors)]
tempdata <- select(alc, one_of(c(predictors[1:length(predictors)],"high_use")))
cv_values[i] <- get_log_model(tempdata)
get_log_model(tempdata)
cv_values <- c()
predictors <- cnames[-length(cnames)]
for( i in length(predictors):1){
tempdata <- select(alc, one_of(c(predictors[i:length(predictors)],"high_use")))
cv_values[i] <- get_log_model(tempdata)
}
cv_values
results <- cbind(models = seq(1:10), Errors = cv_values)
results
ggplot(results, aes(x = models, y = Errors))+geom_line()
results <- as.data.frame(cbind(models = seq(1:10), Errors = cv_values))
ggplot(results, aes(x = models, y = Errors))+geom_line()
results <- as.data.frame(cbind(models = seq(1:10), Penality = cv_values))
ggplot(results, aes(x = models, y = Penality))+geom_line()
results <- as.data.frame(cbind(models = seq(10:1), Penality = cv_values))
ggplot(results, aes(x = models, y = Penality))+geom_line()
results
seq(10:1)
results <- as.data.frame(cbind(models = 10:1, Penality = cv_values))
results
ggplot(results, aes(x = models, y = Penality))+geom_line()
cv_values
results <- as.data.frame(cbind(Number_predictors = 10:1, Penality = cv_values))
ggplot(results, aes(x = predictors, y = Penality))+geom_line()
results <- as.data.frame(cbind(Number_predictors = 10:1, Penality = cv_values))
ggplot(results, aes(x = no_predictors, y = Penality))+geom_line()
results <- as.data.frame(cbind(Number_predictors = 10:1, Penality = cv_values))
ggplot(results, aes(x = Number_predictors, y = Penality))+geom_line()
cnames
